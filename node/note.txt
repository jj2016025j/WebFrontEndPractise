///////////////////////////////////
EJS（Embedded JavaScript Templating）：
是一種模板引擎，用於在服務器端生成 HTML 頁面。
允許在 HTML 中嵌入 JavaScript 代碼。
適用於簡單的服務器端渲染場景。

///////////////////////////////////
path    用來組合路徑
//////////////////////////////////
path.join(string, string) :string

__dirname 是一個 Node.js 中的全局變量，它指向當前執行腳本所在的目錄。

中間件（Middleware）：
中間件是 Express 應用中用於處理請求和響應的函數。
它可以執行代碼、修改請求和響應對象、結束請求-響應循環、調用下一個中間件。
中間件的順序很重要，因為它們按順序執行。

bodyParser 中間件：
bodyParser.json() 用於解析 JSON 格式的請求體。收到json格式轉為js對象
bodyParser.urlencoded({extended: false}) 用於解析 URL 編碼的請求體，常見於處理表單數據。
表單被提交到服務器時，數據會被編碼成類似 "key1=value1&key2=value2" 的格式
urlencoded會將他轉為js對象

session 中間件配置：
用於在 Express 應用中管理用戶會話。
secret 用於簽名 session ID，增加安全性。
resave 和 saveUninitialized 控制 session 的保存行為。
cookie 配置，如 maxAge，控制 cookie 的有效期。

npm install cors
npm install body-parser
npm install express
npm install express-session
npm install ejs
npm install nodemon
npm install http-errors
npm install path
npm install cookie-parser
npm install morgan


// 以 Express 建立 Web 伺服器
var express = require("express");
var app = express();

// 以 body-parser 模組協助 Express 解析表單與JSON資料
var bodyParser = require('body-parser');
app.use( bodyParser.json() );
app.use( bodyParser.urlencoded({extended: false}) );

//預設端口
// app.listen(process.env.PORT);

// Web 伺服器的靜態檔案置於 static 資料夾
app.use( express.static( "static" ) );

// 允許跨域使用本服務
var cors = require("cors");
app.use(cors());

//表單傳送的資料
request.body

//url內含的變數，如"/hello/:text"內的text
request.params

// 模擬程式三秒鐘延遲
var stop = new Date().getTime();
while(new Date().getTime() < stop + 3000) {
    ;
}	

// 以 express-session 管理狀態資訊
var session = require('express-session');
app.use(session({
    secret: 'secretKey',
    resave: false,
    saveUninitialized: true
}));

// 指定 esj 為 Express 的畫面處理引擎
app.set('view engine', 'ejs');
app.engine('html', require('ejs').renderFile);
app.set('views', __dirname + '/view');





//導入和呼叫
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');
app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

設定位置
app.use('/', indexRouter);
app.use('/users', usersRouter);

//get傳送變數方法
app.get("/:controllerName/:actionName", function (request, response) {
    var controllerName = request.params.controllerName;
    var actionName = request.params.actionName;
    doControllerAction(controllerName, actionName, request, response);
});


//不知道的東西
// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

//只有ajax有跨域問題
//解決跨域禁止
app.get("/", function (req, res) {
    res.headers("Access-Control-Allow-Origin","*")
    res.send("你好")
});

//jsonp
app.get("/", function (req, res) {
    var funcname = req.query.callback;
    res.send("你好")
});

//html裡面
    <script>
        function f(data) {
            alert(data)
        }
    </script>
    <script src="http://localhost/callback=func"></script>
